# -*- coding: utf-8 -*-
"""Assignment_1_MA348.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L0QGuzHE1zOhIRzV5TQcJ59OrpvTpN4G

Problem 2.4

What will be displayed when the following Python statements are run?

(a)
Solution:

[[1 2]

[3 4]

[5 6]]

[[5]
 
 [6]]
"""

#Problem 2.4 Part (a)
import numpy as np
A = np.matrix([[1,2],[3,4],[5,6]])
print(A)
A2 = A[2,:].transpose()
print(A2)

"""(b) Solution:

[0.  1.5 3.  4.5 6. ]

or 

[0  1.5  3  4.5  6]
"""

#Problem 2.4 Part (b)
y = np.array(np.arange(0,7,1.5)).transpose()
print(y)

"""(c) Solution:

1.0

0.0625

0.0625
"""

#Problem 2.4 Part (c)
a = 2 ; b = 8 ; c = 4
print(a/b*c)
print(a/b/c)
print(a/(b*c))

"""Problem 2.16

It is accepted general practice in engineering and science to plot analytical mathematical equations using line segments and experimental data as markers. Occasionally, interconnecting lines are added to data plots for the purpose of pattern recognition. Here are a few data for concentration, *c*, versus time *t*, for the photodegredation of aqueous bromine. 

t,min 10, 20, 30, 40, 50, 60

c,ppm 3.4, 2.6, 1.6, 1.3, 1.0, 0.5

These data can be modeled by the following function:

$ c = 4.84e^{-0.034t} $

Use Python to create a plot displaying both the data (using diamond-shaped, green-filled markers with black edges) and the funtion (using a green, dashed line.) Plot the function for the range $ 0 \le t \le 70 $ min. Include grid lines. 
"""

#Problem 2.16
#Import matplotlib, math, numpy
import matplotlib.pyplot as plt
import math
import numpy as np

#Define axis with given data
t = [10,20,30,40,50,60]
c = [3.4, 2.6, 1.6, 1.3, 1.0, 0.5]

#Formatting Graph

  #Axis labels
plt.xlabel('Time in Minutes')
plt.ylabel('Concentration in Parts per Million (ppm)')
  #Graph label
plt.title('Problem 2.16 Graph')
  #Time range requirements
plt.xlim(0,70)

#plot points with customizations
plt.scatter(t, c, marker='D', c='g', edgecolor='black')

#Create function 
x = np.linspace(0,70,8)
n = -0.034 * x
y = 4.84 * np.exp(n)

#plot function
plt.plot(x,y, ls = '--', c = 'g')

#add grid
plt.grid()

#Show final graph
plt.show()